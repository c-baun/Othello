import java.util.ArrayList;

import java.util.ArrayList;

public class Ai{

  int[][] decision;
  boolean[][] available;

  Board b;

  char player_char,ai_char,blank_char;

  int level;

  int length;



  public Ai(Board b,char player_char,char ai_char,char blank_char,int level){
    this.b = b;

    this.player_char = player_char;
    this.ai_char = ai_char;
    this.blank_char =blank_char;

    int length =b.getLength();

    decision = new int[length][length];
    available = new boolean[length][length];

    this.level = level;
  }

  public Board newBoard(){
    Board new_b = new Board(b.getLength(),b.getP1(),b.getP2(),b.getBlank());

    for(int row = 0;row<new_b.getLength();row++){
      for(int col = 0; col<b.getLength();col++){

        new_b.place(row,col,b.getPosition(row, col));

      }
    }


    return new_b;
  }

  public int[] create_decision(int row,int col,int value){
    int[] a = {row,col,value};

    return a;
  }

  public int[] get_best(){//level 1
    int highest_value = 0;
    int highest_row=0;
    int highest_col=0;

    int current_value;


    for(int row = 0; row<b.getLength(); row++){

      for(int col=0;col<b.getLength();col++){
        if(b.getPosition(row,col) == blank_char){

        current_value = b.numFlipped(row, col, ai_char);
        if(current_value !=0){
        

        if(current_value> highest_value){
          highest_row = row;
          highest_col = col;
          highest_value = current_value;

        }
      }
        }
      }
    }
    
    int[] best_arr = {highest_row,highest_col};
    return best_arr;
  }



  public int[] get_best_2(){
    ArrayList<int[]> all_choice = new ArrayList<int[]>();
    
    int current_value;
    
    for(int row = 0; row<b.getLength(); row++){

      for(int col=0;col<b.getLength();col++){
        if(b.getPosition(row,col) == blank_char){

        current_value = b.numFlipped(row, col, ai_char);
        if(current_value !=0){
          all_choice.add(create_decision(row, col, current_value));
      }

        }
      }
    }

    int  highest_value = 0;

    Board newbie;

    int[] highest_decision = all_choice.get(0);

    for(int[] choice:all_choice){
       newbie = newBoard();

       newbie.place(choice[0],choice[1],ai_char); 
       newbie.flip(choice[0], choice[1], ai_char);

       for(int row = 0; row<newbie.getLength();row++){
         for(int col = 0; col<newbie.getLength();col++){

           current_value = newbie.numFlipped(row, col, player_char);
           if(current_value > highest_value){
            highest_value = current_value;
           }

         }
       }

       choice[2] -= highest_value;

       if(highest_decision[2] < choice[2]){
         highest_decision = choice;
       }
    }

    int[]  final_choice = {highest_decision[0],highest_decision[1]};

    return final_choice;

    

  }

/*
  public int[] best_decision(){

    int[] best_d = new int[2];
    best_d[0] = 0;
    best_d[1] = 0;
    int best_value = decision[0][0];

    

    for(int row = 0; row< b.getLength();row++){
      for(int col =0; col<b.getLength(); col++){

        if(available[row][col] && decision[row][col] > best_value){
          best_d[0] =row;
          best_d[1] = col;
          best_value = decision[row][col];
        }

      }
    }

    return best_d;
  }
*/
  public String toString(){
    String total ="";
    for(int row = 0; row<length;row++){
      for (int col = 0;col<length;col++){

        if(available[row][col]){
          total+= decision[row][col];
        }
        else{
          total += '/';
        }
        
        total+=" ";
      }
      total+="\n";
    }
    return total;
  }




}
